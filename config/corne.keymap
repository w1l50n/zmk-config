#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// dt-formatter: indent = "  "
// dt-formatter: multilineIntegerCellsIndent = "reindent"
// dt-formatter: multilineListCommaStyle = "leading"

#define BASE 0
#define RAISE 1
#define LOWER 2
#define NUM 3
#define FUN 4
#define SETTING 5

&sk { /delete-property/ ignore-modifiers; };

/ {
  combos {
    compatible = "zmk,combos";

    caps_word {
      key-positions = <17 18>;
      bindings = <&caps_word>;
    };

    num_word {
      bindings = <&num_word>;
      key-positions = <29 30>;
    };

    to_base {
      bindings = <&to 0>;
      key-positions = <38 39>;
    };
  };

  macros {
    shift: with_lshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "KEY_PRESS_WITH_LEFT_SHIFT_MODIFIER";
      bindings
        = <&macro_press>
        , <&kp LSHFT>
        , <&macro_tap>
        , <&macro_param_1to1 &kp MACRO_PLACEHOLDER>
        , <&macro_release>
        , <&kp LSHFT>
        ;
    };

    as: autoshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "AUTOSHIFT_KEYPRESS";
      bindings
        = <&macro_press>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_release>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        ;
    };
  };

  behaviors {
    as_ht: autoshift_hold_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "AUTOSHIFT_HOLD_TAP";
      bindings = <&shift>, <&kp>;

      tapping-term-ms = <190>;
    };

    hml: hml {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HML";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <280>;
      hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
      flavor = "balanced";
      hold-trigger-on-release;
      require-prior-idle-ms = <150>;
      quick-tap-ms = <175>;
    };

    hmr: hmr {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HMR";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <280>;
      hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
      quick-tap-ms = <175>;
      require-prior-idle-ms = <150>;
      flavor = "balanced";
      hold-trigger-on-release;
    };

    capdance: capdance {
      compatible = "zmk,behavior-tap-dance";
      label = "CAPDANCE";
      #binding-cells = <0>;
      bindings = <&caps_word>, <&kp CAPS>;
    };

    cmd_alt: cmd_alt {
      compatible = "zmk,behavior-tap-dance";
      label = "CMD_ALT";
      #binding-cells = <0>;
      bindings = <&sk LCMD>, <&sk LALT>, <&sk LA(LEFT_GUI)>;
    };

    CS4_CGQ: CS4_CGQ {
      compatible = "zmk,behavior-tap-dance";
      label = "CS4_CGQ";
      #binding-cells = <0>;
      bindings = <&kp LS(LG(N4))>, <&kp LC(LG(Q))>;
    };

    fun_lalt_tp: fun_lalt_tp {
      compatible = "zmk,behavior-tap-dance";
      label = "FUN_LALT_TP";
      #binding-cells = <0>;
      bindings = <&sl 4>, <&sk LALT>;
    };

    shift_cap_dance: shift_cap_dance {
      compatible = "zmk,behavior-tap-dance";
      label = "SHIFT_CAP_DANCE";
      #binding-cells = <0>;
      bindings = <&sk LEFT_SHIFT>, <&caps_word>;
    };

    mwh: behavior_mouse_scroll {
      compatible = "zmk,behavior-mouse-scroll";
      label = "MOUSE_SCROLL";
      #binding-cells = <1>;
      delay-ms = <0>;
      time-to-max-speed-ms = <0>;
      acceleration-exponent = <2>;
    };

    scroll_ht: scroll_ht {
      compatible = "zmk,behavior-hold-tap";
      label = "SCROLL_HT";
      bindings = <&mwh>, <&kp>;

      #binding-cells = <2>;
      tapping-term-ms = <150>;
      flavor = "tap-preferred";
    };

    num_word: behavior_num_word {
      compatible = "zmk,behavior-caps-word";
      label = "NUM_WORD";
      #binding-cells = <0>;
      layers = <NUM>;                                // insert location of numbers layer here
      continue-list = <BACKSPACE DELETE DOT COMMA QUESTION UNDERSCORE PLUS MINUS SLASH ASTERISK LEFT_SHIFT RIGHT_SHIFT EQUAL>;  // adjust as desired
      ignore-numbers;                                // numbers don't deactivate the layer
    };

    num_word_kp: num_word_kp {
      compatible = "zmk,behavior-hold-tap";
      label = "NUM_WORD_KP";
      bindings = <&num_word>, <&kp>;

      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
    };

    alt_cmd: alt_cmd {
      compatible = "zmk,behavior-tap-dance";
      label = "ALT_CMD";
      #binding-cells = <0>;
      bindings = <&sk RIGHT_ALT>, <&sk RCMD>, <&sk RA(RCMD)>;
    };

    gs_rbkt: gs_rbkt {
      compatible = "zmk,behavior-mod-morph";
      label = "GS_RBKT";
      bindings = <&kp LEFT_BRACKET>, <&kp LS(LG(LEFT_BRACKET))>;

      #binding-cells = <0>;
      mods = <(MOD_LGUI)>;
    };

    gs_lbkt: gs_lbkt {
      compatible = "zmk,behavior-mod-morph";
      label = "GS_LBKT";
      bindings = <&kp RIGHT_BRACKET>, <&kp LS(LG(RIGHT_BRACKET))>;

      #binding-cells = <0>;
      mods = <(MOD_LGUI)>;
    };

    f5_tab: f5_tab {
      compatible = "zmk,behavior-mod-morph";
      label = "F5_TAB";
      bindings = <&kp F5>, <&kp TAB>;

      #binding-cells = <0>;
      mods = <(MOD_LGUI|MOD_RALT|MOD_RGUI)>;
      keep-mods = <(MOD_RGUI)>;
    };

    dot_question: dot_question {
      compatible = "zmk,behavior-mod-morph";
      label = "DOT_QUESTION";
      bindings = <&kp DOT>, <&kp QUESTION>;

      #binding-cells = <0>;
      mods = <(MOD_LSFT)>;
    };

    tilde_rpar: tilde_rpar {
      compatible = "zmk,behavior-mod-morph";
      label = "TILDE_RPAR";
      bindings = <&kp TILDE>, <&kp RPAR>;

      #binding-cells = <0>;
      mods = <(MOD_LGUI)>;
    };

    gs_rbb: gs_rbb {
      compatible = "zmk,behavior-mod-morph";
      label = "GS_RBB";
      bindings = <&kp LBRC>, <&kp LS(LG(RBKT))>;

      #binding-cells = <0>;
      mods = <(MOD_LGUI)>;
    };

    sk_sl: sk_sl {
      compatible = "zmk,behavior-hold-tap";
      label = "SK_SL";
      bindings = <&sk>, <&sl>;

      #binding-cells = <2>;
      tapping-term-ms = <280>;
      quick-tap-ms = <175>;
      require-prior-idle-ms = <150>;
      flavor = "balanced";
      hold-trigger-on-release;
    };

    kp_to: kp_to {
      compatible = "zmk,behavior-hold-tap";
      label = "KP_TO";
      bindings = <&kp>, <&to>;

      #binding-cells = <2>;
      tapping-term-ms = <150>;
      quick-tap-ms = <(-1)>;
      require-prior-idle-ms = <0>;
      flavor = "balanced";
      hold-trigger-on-release;
    };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";

    setting {
      if-layers = <1 2>;
      then-layer = <5>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base {
      bindings = <
        &kp TAB               &kp Q            &kp W            &kp E              &kp R              &kp T          &kp Y        &kp U          &kp I          &kp O             &kp P                &kp BACKSPACE
        &mt LEFT_CONTROL ESC  &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LCTRL D       &hml LEFT_SHIFT F  &kp G          &kp H        &hmr RSHIFT J  &hmr RCTRL K   &hmr RIGHT_ALT L  &hmr RIGHT_GUI SEMI  &kp SQT
        &kp LEFT_SHIFT        &kp Z            &kp X            &kp C              &kp V              &kp B          &kp N        &kp M          &kp COMMA      &kp DOT           &kp FSLH             &mt RSHIFT ENTER
                                                                &kp_to LEFT_ALT 4  &kp_to LCMD 2      &lt 2 SPACE    &lt 3 ENTER  &lt 1 SPACE    &kp_to RCMD 1
      >;
    };

    raise {
      bindings = <
        &trans           &kp N1   &kp N2   &kp N3            &kp N4             &kp N5    &kp N6    &kp N7     &kp N8         &kp N9     &kp N0         &trans
        &kp EXCLAMATION  &kp F11  &kp F12  &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp F5    &kp LEFT  &kp DOWN   &kp UP         &kp RIGHT  &kp BACKSPACE  &kp QUESTION
        &trans           &trans   &trans   &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans    &trans    &kp GRAVE  &kp MINUS      &kp EQUAL  &kp BSLH       &trans
                                           &trans            &trans             &trans    &trans    &trans     &kp_to RCMD 0
      >;

      label = "raise";
    };

    lower {
      bindings = <
        &trans    &trans  &trans            &mwh SCROLL_UP            &trans                     &kp TAB          &trans  &trans  &trans  &trans  &trans  &trans
        &trans    &trans  &mwh SCROLL_LEFT  &mwh SCROLL_LEFT          &mwh SCROLL_RIGHT          &kp ENTER        &trans  &trans  &trans  &trans  &trans  &trans
        &CS4_CGQ  &trans  &trans            &kp LS(LG(LEFT_BRACKET))  &kp LS(LG(RIGHT_BRACKET))  &kp BACKSPACE    &trans  &trans  &trans  &trans  &trans  &trans
                                            &trans                    &kp_to LCMD 0              &trans           &trans  &trans  &trans
      >;

      label = "lower";
    };

    num {
      bindings = <
        &trans  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR        &kp PERCENT       &kp CARET        &kp AMPERSAND      &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
        &trans  &kp N1           &kp N2       &kp N3    &kp N4            &kp N5            &kp N6           &kp N7             &kp N8        &kp N9                &kp N0                 &trans
        &trans  &trans           &trans       &trans    &kp LEFT_BRACKET  &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &trans        &trans                &trans                 &trans
                                              &trans    &trans            &trans            &trans           &trans             &trans
      >;

      label = "num";
    };

    fun {
      bindings = <
        &trans  &kp F1   &kp F2   &kp F3             &kp F4  &kp F5    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &trans
        &trans  &kp F11  &kp F12  &trans             &trans  &trans    &trans  &trans  &trans  &trans  &trans   &trans
        &trans  &trans   &trans   &trans             &trans  &trans    &trans  &trans  &trans  &trans  &trans   &trans
                                  &kp_to LEFT_ALT 0  &trans  &trans    &trans  &trans  &trans
      >;
    };

    setting {
      bindings = <
        &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &kp C_AC_DESKTOP_SHOW_ALL_APPLICATIONS  &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
        &bt BT_CLR            &bt BT_SEL 0          &bt BT_SEL 1                       &bt BT_SEL 2                            &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
        &trans                &trans                &trans                             &trans                                  &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                                                                       &trans                                  &trans        &trans          &trans  &trans  &trans
      >;
    };
  };
};
