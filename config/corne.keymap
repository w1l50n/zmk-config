#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// dt-formatter: indent = "  "
// dt-formatter: multilineIntegerCellsIndent = "reindent"
// dt-formatter: multilineListCommaStyle = "leading"

&sk {
  /delete-property/ ignore-modifiers;
};

/ {
  combos {
    compatible = "zmk,combos";

    tab {
      key-positions = <2 3>;
      bindings = <&kp TAB>;
    };

    ctrl {
      key-positions = <26 27>;
      bindings = <&kp LCTRL>;
    };

    cmd {
      key-positions = <37 38>;
      bindings = <&kp LCMD>;
    };

    alt {
      key-positions = <39 40>;
      bindings = <&kp LEFT_ALT>;
    };

    shift {
      key-positions = <8 9>;
      bindings = <&kp LSHIFT>;
    };

    caps_word {
      key-positions = <17 18>;
      bindings = <&caps_word>;
    };

    delete {
      key-positions = <32 33>;
      bindings = <&kp DEL>;
    };
  };

  macros {
    greeting: greeting {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "greeting";
      bindings = <&kp H &kp E &kp L &kp L &kp O>;
    };
    shift: with_lshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "KEY_PRESS_WITH_LEFT_SHIFT_MODIFIER";
      bindings
        = <&macro_press>
        , <&kp LSHFT>
        , <&macro_tap>
        , <&macro_param_1to1 &kp MACRO_PLACEHOLDER>
        , <&macro_release>
        , <&kp LSHFT>
        ;
    };
    as: autoshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "AUTOSHIFT_KEYPRESS";
      bindings
        = <&macro_press>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_release>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        ;
    };
    list_open: list_open {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp LBKT &kp SQT>;
      label = "LIST_OPEN";
    };
    list_close: list_close {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = <&kp SQT &kp LBRC>;
      label = "LIST_CLOSE";
    };
  };

  behaviors {
    as_ht: autoshift_hold_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "AUTOSHIFT_HOLD_TAP";
      bindings = <&shift>, <&kp>;

      tapping-term-ms = <190>;
    };
    hml: homewrow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_LEFT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
    };
    hmr: homewrow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_RIGHT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
    };
    capdance: capdance {
      compatible = "zmk,behavior-tap-dance";
      label = "CAPDANCE";
      #binding-cells = <0>;
      bindings = <&caps_word>, <&kp CAPS>;
    };
    sq_return: sq_return {
      compatible = "zmk,behavior-tap-dance";
      label = "SQ_RETURN";
      #binding-cells = <0>;
      bindings = <&kp SQT>, <&kp RETURN>;
    };
    left_bracket_sq: left_bracket_sq {
      compatible = "zmk,behavior-tap-dance";
      label = "LEFT_BRACKET_SQ";
      #binding-cells = <0>;
      bindings = <&kp LEFT_BRACKET>, <&list_open>;
    };
    right_bracket_sq: right_bracket_sq {
      compatible = "zmk,behavior-tap-dance";
      label = "RIGHT_BRACKET_SQ";
      #binding-cells = <0>;
      bindings = <&kp RIGHT_BRACKET>, <&list_close>;
    };
    cmd_dance: cmd_dance {
      compatible = "zmk,behavior-tap-dance";
      label = "CMD_DANCE";
      #binding-cells = <0>;
      bindings = <&kp LGUI>, <&sk LA(LEFT_GUI)>, <&sk LS(LA(LEFT_GUI))>;
    };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";

    setting {
      if-layers = <2 1>;
      then-layer = <5>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base {
      bindings = <
        &kp TAB               &kp Q  &kp W  &kp E         &kp R         &kp T          &kp Y         &kp U  &kp I      &kp O    &kp P     &kp BACKSPACE
        &mt LEFT_CONTROL ESC  &kp A  &kp S  &kp D         &kp F         &kp G          &kp H         &kp J  &kp K      &kp L    &kp SEMI  &kp SQT
        &kp LSHFT             &kp Z  &kp X  &kp C         &kp V         &kp B          &kp N         &kp M  &kp COMMA  &kp DOT  &kp FSLH  &mt RSHIFT ENTER
                                            &kp LEFT_ALT  &kp LEFT_GUI  &lt 1 SPACE    &lt 2 RETURN  &mo 2  &kp RALT
      >;
    };

    raise {
      bindings = <
        &trans  &kp N1     &kp N2     &kp N3  &kp N4    &kp N5      &kp N6    &kp N7           &kp N8    &kp N9     &kp N0    &trans
        &trans  &kp GRAVE  &kp TILDE  &trans  &kp LBRC  &kp LBKT    &kp RBKT  &kp RIGHT_BRACE  &kp BSLH  &kp MINUS  &kp PLUS  &trans
        &trans  &trans     &trans     &trans  &trans    &trans      &trans    &trans           &trans    &trans     &trans    &trans
                                      &trans  &trans    &trans      &trans    &trans           &trans
      >;

      label = "raise";
    };

    lower {
      bindings = <
        &trans  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
        &trans  &trans           &trans       &trans    &trans      &trans         &kp LEFT   &kp DOWN       &kp UP        &kp RIGHT             &kp BACKSPACE          &trans
        &trans  &trans           &trans       &trans    &trans      &trans         &trans     &kp GRAVE      &kp MINUS     &kp EQUAL             &kp BSLH               &trans
                                              &trans    &trans      &trans         &trans     &trans         &trans
      >;

      label = "lower";
    };

    fun {
      bindings = <
        &trans  &kp F1  &kp F2   &kp F3   &kp F4   &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &kp F5  &kp F6   &kp F7   &kp F8   &trans    &trans  &trans  &trans  &trans  &trans  &trans
        &trans  &kp F9  &kp F10  &kp F11  &kp F12  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                                 &trans   &trans   &trans    &trans  &trans  &trans
      >;
    };

    autoshift {
      bindings = <
        &trans  &as Q  &as W  &as E   &as R   &as T     &as Y   &as U   &as I   &as O   &as P   &trans
        &trans  &as A  &as S  &as D   &as F   &as G     &as H   &as J   &as K   &as L   &trans  &trans
        &trans  &as Z  &as X  &as C   &as V   &as B     &as N   &as M   &trans  &trans  &trans  &trans
                              &trans  &trans  &trans    &trans  &trans  &trans
      >;
    };

    setting {
      bindings = <
        &trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
        &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
        &trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                                &trans        &trans        &trans          &trans  &trans  &trans
      >;
    };
  };
};
