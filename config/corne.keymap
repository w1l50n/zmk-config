#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// dt-formatter: indent = "  "
// dt-formatter: multilineIntegerCellsIndent = "reindent"
// dt-formatter: multilineListCommaStyle = "leading"

&sk {
  /delete-property/ ignore-modifiers;
};

/ {
  combos {
    compatible = "zmk,combos";

    caps_word {
      key-positions = <17 18>;
      bindings = <&caps_word>;
    };

    delete {
      key-positions = <32 33>;
      bindings = <&kp DEL>;
    };
  };

  macros {
    shift: with_lshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "KEY_PRESS_WITH_LEFT_SHIFT_MODIFIER";
      bindings
        = <&macro_press>
        , <&kp LSHFT>
        , <&macro_tap>
        , <&macro_param_1to1 &kp MACRO_PLACEHOLDER>
        , <&macro_release>
        , <&kp LSHFT>
        ;
    };
    as: autoshift {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      label = "AUTOSHIFT_KEYPRESS";
      bindings
        = <&macro_press>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        , <&macro_pause_for_release>
        , <&macro_release>
        , <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>
        ;
    };
  };

  behaviors {
    as_ht: autoshift_hold_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "AUTOSHIFT_HOLD_TAP";
      bindings = <&shift>, <&kp>;

      tapping-term-ms = <190>;
    };
    hml: homewrow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_LEFT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
    };
    hmr: homewrow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_RIGHT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
    };
    capdance: capdance {
      compatible = "zmk,behavior-tap-dance";
      label = "CAPDANCE";
      #binding-cells = <0>;
      bindings = <&caps_word>, <&kp CAPS>;
    };
    sq_return_dance: sq_return_dance {
      compatible = "zmk,behavior-tap-dance";
      label = "SQ_RETURN_DANCE";
      #binding-cells = <0>;
      bindings = <&kp SQT>, <&kp RETURN>;
    };
    cmd_alt_dance: cmd_alt_dance {
      compatible = "zmk,behavior-tap-dance";
      label = "CMD_ALT_DANCE";
      #binding-cells = <0>;
      bindings
        = <&sk LCMD>
        , <&sk LALT>
        , <&sk LA(LEFT_GUI)>
        , <&sk LS(LA(LEFT_GUI))>
        ;
    };
    cmd_ctl_q_dance: cmd_ctl_q_dance {
      compatible = "zmk,behavior-tap-dance";
      label = "CMD_CTL_Q_DANCE";
      #binding-cells = <0>;
      bindings = <&trans>, <&kp LC(LG(Q))>;
    };
    fun_lalt_dance: fun_lalt_dance {
      compatible = "zmk,behavior-tap-dance";
      label = "FUN_LALT_DANCE";
      #binding-cells = <0>;
      bindings = <&sl 4>, <&sk LALT>;
    };
    shift_cap_dance: shift_cap_dance {
      compatible = "zmk,behavior-tap-dance";
      label = "SHIFT_CAP_DANCE";
      #binding-cells = <0>;
      bindings = <&sk LEFT_SHIFT>, <&caps_word>;
    };
    mwh: behavior_mouse_scroll {
      compatible = "zmk,behavior-mouse-scroll";
      label = "MOUSE_SCROLL";
      #binding-cells = <1>;
      delay-ms = <0>;
      time-to-max-speed-ms = <0>;
      acceleration-exponent = <0>;
    };
    scroll_3_hold_tap: scroll_3_hold_tap {
      compatible = "zmk,behavior-hold-tap";
      label = "SCROLL_3_HOLD_TAP";
      bindings = <&mwh>, <&kp>;

      #binding-cells = <2>;
      tapping-term-ms = <200>;
      flavor = "tap-preferred";
    };
  };

  &num_word {
    layers = <3>;  // replace NUM by the location of numbers layer
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";

    setting {
      if-layers = <2 1>;
      then-layer = <5>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base {
      bindings = <
        &kp TAB               &kp Q  &kp W  &kp E            &kp R        &kp T             &kp Y         &kp U      &kp I            &kp O    &kp P     &kp BACKSPACE
        &mt LEFT_CONTROL ESC  &kp A  &kp S  &kp D            &kp F        &kp G             &kp H         &kp J      &kp K            &kp L    &kp SEMI  &kp SQT
        &shift_cap_dance      &kp Z  &kp X  &kp C            &kp V        &kp B             &kp N         &kp M      &kp COMMA        &kp DOT  &kp FSLH  &mt RSHIFT ENTER
                                            &cmd_alt_dance  &lt 1 SPACE &lt 1 SPACE       &num_word &lt 2 RETURN  &fun_lalt_dance
      >;
    };

    raise {
      bindings = <
        &trans  &kp N1  &kp N2            &scroll_3_hold_tap SCROLL_UP NUMBER_3  &kp N4             &kp N5            &kp N6           &kp N7     &kp N8          &kp N9     &kp N0    &trans
        &trans  &trans  &mwh SCROLL_LEFT  &mwh SCROLL_DOWN                       &mwh SCROLL_RIGHT  &kp LBKT          &kp RBKT         &kp TILDE  &kp UNDERSCORE  &kp PLUS   &kp PIPE  &trans
        &trans  &trans  &trans            &trans                                 &trans             &kp LEFT_BRACE    &kp RIGHT_BRACE  &kp GRAVE  &kp MINUS       &kp EQUAL  &kp BSLH  &trans
                                          &trans                                 &trans             &trans            &trans           &trans     &trans
      >;

      label = "raise";
    };

    lower {
      bindings = <
        &trans  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
        &trans  &trans           &trans       &trans    &trans      &trans         &kp LEFT   &kp DOWN       &kp UP        &kp RIGHT             &kp BACKSPACE          &sq_return_dance
        &trans  &trans           &trans       &trans    &trans      &trans         &trans     &trans         &trans        &trans                &trans                 &trans
                                              &trans    &trans      &trans         &trans     &trans         &trans
      >;

      label = "lower";
    };

    num {
      bindings = <
        &trans  &kp EXCLAMATION  &kp AT_SIGN  &kp HASH  &kp DOLLAR  &kp PERCENT    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans
        &trans  &kp N1           &kp N2       &kp N3    &kp N4      &kp N5         &kp N6     &kp N7         &kp N8        &kp N9                &kp N0                 &trans
        &trans  &trans           &trans       &trans    &trans      &trans         &trans     &trans         &trans        &trans                &trans                 &trans
                                              &trans    &trans      &trans         &trans     &trans         &trans
      >;

      label = "num";
    };

    fun {
      bindings = <
        &trans  &kp F1   &kp F2   &kp F3  &kp F4  &kp F5    &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &trans
        &trans  &kp F11  &kp F12  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   &trans
        &trans  &trans   &trans   &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans   &trans
                                  &trans  &trans  &trans    &trans  &trans  &trans
      >;
    };

    setting {
      bindings = <
        &kp C_BRIGHTNESS_DEC  &kp C_BRIGHTNESS_INC  &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &kp C_AC_DESKTOP_SHOW_ALL_APPLICATIONS  &trans        &trans          &kp C_VOLUME_UP    &trans  &trans  &trans  &trans  &trans
        &bt BT_CLR            &bt BT_SEL 0          &bt BT_SEL 1                       &bt BT_SEL 2                            &bt BT_SEL 3  &bt BT_SEL 4    &kp C_VOLUME_DOWN  &trans  &trans  &trans  &trans  &trans
        &trans                &trans                &trans                             &trans                                  &trans        &trans          &kp K_MUTE         &trans  &trans  &trans  &trans  &trans
                                                                                       &trans                                  &trans        &trans          &trans             &trans  &trans
      >;
    };
  };
};
